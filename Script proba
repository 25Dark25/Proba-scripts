local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Dark Hub v2.0",
   Icon = 119268860825586, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Dark Hub GUI",
   LoadingSubtitle = "by Dark",
   ShowText = "Dark Hub", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = DarkHub, -- Create a custom folder for your hub/game
      FileName = "UserConfig"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Dark Hub",
      Subtitle = "Key System",
      Note = "Get Key https://link-target.net/1375645/02KTipcoF3Vz", -- Use this to tell the user how to get a key
      FileName = "DarkHubKey1", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"DarkHub29568294"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

-- Crear pesta√±as
local EspTab = Window:CreateTab("üßø ESP", 4483362458)
local AimbotTab = Window:CreateTab("üéØ Aimbot", 4483362458)
local ConfigTab = Window:CreateTab("‚öôÔ∏è Settings", 4483362458)
local UpdateinfoTab = Window:CreateTab("‚ÑπÔ∏è Update Info", 4483362458)

-- Variables l√≥gicas
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera
local showBoxes = true
local showNames = true
local showHealthBars = true
local showDistance = true
local showTracers = true
local aimPart = "Head" -- por defecto
local maxESPDistance = 1500
local maxAimbotDistance = 1000

local espEnabled = true
local aimbotEnabled = false
local ignoreTeammates = false
local aimbotKey = Enum.UserInputType.MouseButton2
local aimbotHold = false
local smoothing = 0.15
local fovRadius = 100

local espDrawings = {} -- para guardar cada dibujo por jugador
local highlighted = {}
local fovCircle = Drawing.new("Circle")
fovCircle.Color = Color3.fromRGB(255, 0, 0)
fovCircle.Thickness = 1
fovCircle.Radius = fovRadius
fovCircle.NumSides = 64
fovCircle.Transparency = 1
fovCircle.Visible = false
fovCircle.Filled = false


-- ESP
local function isVisible(character)
    if not character or not character:FindFirstChild("Head") then return false end
    local origin = Camera.CFrame.Position
    local direction = (character.Head.Position - origin)
    local params = RaycastParams.new()
    params.FilterDescendantsInstances = {LocalPlayer.Character}
    params.FilterType = Enum.RaycastFilterType.Blacklist
    local result = workspace:Raycast(origin, direction, params)
    return (not result or result.Instance:IsDescendantOf(character))
end

local function updateHighlightColors()
    for character, hl in pairs(highlighted) do
        if character and hl and character:FindFirstChild("Head") then
            local distance = (Camera.CFrame.Position - character.Head.Position).Magnitude
            if distance <= maxESPDistance and espEnabled then
                hl.Enabled = true
                hl.OutlineColor = isVisible(character) and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 0, 0)
            else
                hl.Enabled = false
            end
        elseif hl then
            hl.Enabled = false
        end
    end
end

local function addHighlight(character)
    if highlighted[character] or not espEnabled then return end
    local head = character:FindFirstChild("Head")
    if not head then return end
    local distance = (Camera.CFrame.Position - head.Position).Magnitude
    if distance > maxESPDistance then return end
    local player = Players:GetPlayerFromCharacter(character)
    if not player or (ignoreTeammates and player.Team == LocalPlayer.Team) then return end

    local hl = Instance.new("Highlight")
    hl.Name = "ClientHighlight"
    hl.Adornee = character
    hl.FillTransparency = 1
    hl.OutlineTransparency = 0
    hl.Parent = character
    highlighted[character] = hl
end

local function createESP(player)
    if espDrawings[player] then return end
    espDrawings[player] = {}

    local function newDrawing(type, props)
        local drawing = Drawing.new(type)
        for prop, val in pairs(props) do
            drawing[prop] = val
        end
        return drawing
    end

    espDrawings[player].Box = newDrawing("Square", {Color = Color3.fromRGB(255,255,255), Thickness = 1, Filled = false, Visible = false})
    espDrawings[player].Name = newDrawing("Text", {Color = Color3.fromRGB(255,255,255), Size = 13, Center = true, Outline = true, Visible = false})
    espDrawings[player].Distance = newDrawing("Text", {Color = Color3.fromRGB(0,255,255), Size = 13, Center = true, Outline = true, Visible = false})
    espDrawings[player].Health = newDrawing("Line", {Color = Color3.fromRGB(0,255,0), Thickness = 2, Visible = false})
    espDrawings[player].Tracer = newDrawing("Line", {Color = Color3.fromRGB(255,255,0), Thickness = 1, Visible = false})
end

local function removeESP(player)
    if espDrawings[player] then
        for _, draw in pairs(espDrawings[player]) do
            draw:Remove()
        end
        espDrawings[player] = nil
    end
end

local function updateESP()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Head") then
            createESP(player)

            local parts = espDrawings[player]
            local hrp = player.Character.HumanoidRootPart
            local head = player.Character.Head
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            local screenPos, onScreen = Camera:WorldToViewportPoint(hrp.Position)

            if onScreen and (Camera.CFrame.Position - hrp.Position).Magnitude <= maxESPDistance then
                local scale = (Camera.CFrame.Position - hrp.Position).Magnitude
                local size = 40 -- Puedes ajustar este valor si quieres que las cajas sean m√°s grandes o m√°s peque√±as
                local x, y = screenPos.X, screenPos.Y

                -- Box
                if showBoxes then
                    parts.Box.Size = Vector2.new(size * 1.1, size * 1.8)
                    parts.Box.Position = Vector2.new(x - size * 0.55, y - size * 0.9)
                    parts.Box.Visible = true
                else
                    parts.Box.Visible = false
                end

                -- Name
                if showNames then
                    parts.Name.Position = Vector2.new(x, y - size * 1.3)
                    parts.Name.Text = player.Name
                    parts.Name.Visible = true
                else
                    parts.Name.Visible = false
                end

                -- Distance
                if showDistance then
                    local dist = math.floor((hrp.Position - Camera.CFrame.Position).Magnitude)
                    parts.Distance.Position = Vector2.new(x, y + size * 1.2)
                    parts.Distance.Text = tostring(dist) .. "m"
                    parts.Distance.Visible = true
                else
                    parts.Distance.Visible = false
                end

                -- Health Bar
                if showHealthBars then
                    local hpPercent = humanoid.Health / humanoid.MaxHealth
                    parts.Health.From = Vector2.new(x - size, y + size)
                    parts.Health.To = Vector2.new(x - size, y + size - (size * 2 * hpPercent))
                    parts.Health.Color = Color3.fromRGB(255 - (255 * hpPercent), 255 * hpPercent, 0)
                    parts.Health.Visible = true
                else
                    parts.Health.Visible = false
                end

                -- Tracer
                if showTracers then
                    local bottom = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                    parts.Tracer.From = bottom
                    parts.Tracer.To = Vector2.new(x, y + size)
                    parts.Tracer.Visible = true
                else
                    parts.Tracer.Visible = false
                end
            else
                for _, d in pairs(parts) do d.Visible = false end
            end
        else
            removeESP(player)
        end
    end
end

local function removeHighlight(character)
    local hl = highlighted[character]
    if hl then
        hl:Destroy()
        highlighted[character] = nil
    end
end

local function refreshESP()
    for char in pairs(highlighted) do
        removeHighlight(char)
    end
    if not espEnabled then return end
    for _, p in ipairs(Players:GetPlayers()) do
        if p ~= LocalPlayer and p.Character then
            addHighlight(p.Character)
        end
    end
end

Players.PlayerAdded:Connect(function(p)
    p.CharacterAdded:Connect(function(char)
        task.wait(1)
        if espEnabled then
            addHighlight(char)
        end
    end)
end)

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= LocalPlayer and player.Character then
        addHighlight(player.Character)
    end
end

for _, player in ipairs(Players:GetPlayers()) do
   if player ~= LocalPlayer then
       player.CharacterAdded:Connect(function(char)
           task.wait(1)
           if espEnabled then
               addHighlight(char)
           end
       end)
   end
end


-- Aimbot
local function getClosestTarget()
    local closest = nil
    local shortest = math.huge
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild(aimPart) then
            if not ignoreTeammates or player.Team ~= LocalPlayer.Team then
                local head = player.Character[aimPart]
                local distanceFromPlayer = (Camera.CFrame.Position - head.Position).Magnitude
                if distanceFromPlayer > maxAimbotDistance then
                    continue
                end
                local screenPoint, onScreen = Camera:WorldToViewportPoint(head.Position)
                if onScreen and isVisible(player.Character) then
                    local mousePos = UserInputService:GetMouseLocation()
                    local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(mousePos.X, mousePos.Y)).Magnitude
                    if distance < fovRadius and distance < shortest then
                        closest = head
                        shortest = distance
                    end
                end
            end
        end
    end
    return closest
end

local function aimAtTarget(target)
    if not target then return end
    local screenPoint = Camera:WorldToViewportPoint(target.Position)
    local mousePos = UserInputService:GetMouseLocation()
    local aimPos = Vector2.new(screenPoint.X, screenPoint.Y)
    local move = (aimPos - Vector2.new(mousePos.X, mousePos.Y)) * (1
     - smoothing)
    mousemoverel(move.X, move.Y)
end

-- UI Elements
EspTab:CreateToggle({
   Name = "Enable ESP",
   CurrentValue = espEnabled,
   Flag = "EnableESP",
   Callback = function(val)
       espEnabled = val
       refreshESP()
   end,
})

EspTab:CreateToggle({
   Name = "Ignore Teammates",
   CurrentValue = ignoreTeammates,
   Flag = "IgnoreTeammates",
   Callback = function(val)
       ignoreTeammates = val
       refreshESP()
   end,
})

EspTab:CreateToggle({
    Name = "Box",
    CurrentValue = true,
    Flag = "ShowBoxes",
    Callback = function(val)
        showBoxes = val
    end,
})

EspTab:CreateToggle({
    Name = "Names",
    CurrentValue = true,
    Flag = "ShowNames",
    Callback = function(val)
        showNames = val
    end,
})

EspTab:CreateToggle({
    Name = "Health Bar",
    CurrentValue = true,
    Flag = "ShowHealthBars",
    Callback = function(val)
        showHealthBars = val
    end,
})

EspTab:CreateToggle({
    Name = "Distance",
    CurrentValue = true,
    Flag = "ShowDistance",
    Callback = function(val)
        showDistance = val
    end,
})

EspTab:CreateToggle({
    Name = "Tracers",
    CurrentValue = true,
    Flag = "ShowTracers",
    Callback = function(val)
        showTracers = val
    end,
})

EspTab:CreateSlider({
   Name = "ESP Max Distance",
   Range = {100, 5000},
   Increment = 100,
   CurrentValue = 1500,
   Flag = "ESPMaxDistance",
   Callback = function(val)
       maxESPDistance = val
       refreshESP()
   end,
})

AimbotTab:CreateToggle({
   Name = "Enable Aimbot",
   CurrentValue = aimbotEnabled,
   Flag = "EnableAimbot",
   Callback = function(val)
       aimbotEnabled = val
       fovCircle.Visible = val
   end,
})

AimbotTab:CreateSlider({
    Name = "FOV size",
    Range = {50, 500},
    Increment = 10,
    Suffix = "px",
    CurrentValue = 100,
    Flag = "FOVRadius",
    Callback = function(v)
        fovRadius = v
        fovCircle.Radius = v
    end
})

AimbotTab:CreateSlider({
    Name = "Smoothing",
    Range = {0.01, 1},
    Increment = 0.01,
    CurrentValue = 0.15,
    Flag = "Smoothing",
    Callback = function(v)
        smoothing = v
    end
})

AimbotTab:CreateSlider({
   Name = "Aimbot Max Distance",
   Range = {100, 3000},
   Increment = 100,
   CurrentValue = 1000,
   Flag = "AimbotMaxDistance",
   Callback = function(val)
       maxAimbotDistance = val
   end,
})

ConfigTab:CreateParagraph({
   Title = "‚ÑπÔ∏è Info",
   Content = "The configuration is automatically saved.",
})


ConfigTab:CreateButton({
    Name = "üìÇ Load configuration",
    Callback = function()
        local success, err = pcall(function()
            Rayfield:LoadConfiguration()
        end)
        if success then
            Rayfield:Notify({
                Title = "Uploaded",
                Content = "Configuration loaded correctly.",
                Duration = 4
            })
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "An error occurred while loading: " .. tostring(err),
                Duration = 6
            })
        end
    end,
})

UpdateinfoTab:CreateParagraph({
   Title = "Changelog:",
   Content = [[
   ESP
 - Box
 - Names
 - Health Bar
 - Distance
 - Tracers

Aimbot
 - Aimbot max distance]],
})

UpdateinfoTab:CreateParagraph({
   Title = "Next updates:",
   Content = [[
   The following will be applied in future updates:

- ESP Ignores dead players
- Fixed box sizes
- You can tell me recommendations on rscripts.net]],
})

-- Input
local lastColorUpdate = 0
local colorUpdateInterval = 0.05

UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.UserInputType == aimbotKey then
        aimbotHold = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == aimbotKey then
        aimbotHold = false
    end
end)

RunService.RenderStepped:Connect(function(dt)
    if espEnabled then
        lastColorUpdate += dt
        if lastColorUpdate >= colorUpdateInterval then
            lastColorUpdate = 0
            updateHighlightColors()
        end
        updateESP()
    else
        for _, drawSet in pairs(espDrawings) do
            for _, d in pairs(drawSet) do
                d.Visible = false
            end
        end
    end


    if aimbotEnabled and aimbotHold then
        local target = getClosestTarget()
        aimAtTarget(target)
    end

    local vp = Camera.ViewportSize
    fovCircle.Position = Vector2.new(vp.X / 2, vp.Y / 2)
end)

Players.PlayerRemoving:Connect(function(p)
    removeHighlight(p.Character)
    removeESP(p)
end)
